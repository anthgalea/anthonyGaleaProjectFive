{"version":3,"sources":["firebase.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Footer","className","Component","App","handleChange","event","setState","userInput","target","value","handleClick","preventDefault","database","ref","push","state","handleRemove","journalKey","console","log","child","remove","journals","on","response","val","freshState","data","key","journalEntry","action","id","name","rows","cols","placeholder","onChange","this","onClick","map","journal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qSAaAA,IAASC,cAVM,CACXC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECAeS,G,6KAVP,OACI,gCACI,uBAAGC,UAAU,mBAAb,iD,GAJKC,cCuHNC,E,kDApHb,aAAe,IAAD,8BACZ,gBAwCFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAWF,EAAMG,OAAOC,SA3Cd,EAmDdC,YAAc,SAACL,GACbA,EAAMM,iBAGQpB,EAASqB,WAAWC,MAG5BC,KAAK,EAAKC,MAAMR,WAGtB,EAAKD,SAAS,CACZC,UAAW,MA9DD,EAoEdS,aAAe,SAACC,GACdC,QAAQC,IAAIF,GAGE1B,EAASqB,WAAWC,MAG5BO,MAAMH,GAAYI,UAxExB,EAAKN,MAAQ,CACXO,SAAU,GACVf,UAAW,IALD,E,gEAUO,IAAD,OAEHhB,EAASqB,WAAWC,MAG7BU,GAAG,SAAQ,SAACC,GAChBN,QAAQC,IAAIK,EAASC,OAErB,IAAMC,EAAa,GACbC,EAAOH,EAASC,MAGtB,IAAI,IAAMG,KAAOD,EACfT,QAAQC,IAAIS,EAAKD,EAAKC,IAItBF,EAAWZ,KAAK,CACdc,IAAKA,EACLC,aAAcF,EAAKC,KAKvB,EAAKtB,SAAS,CACZgB,SAAUI,S,+BA2CN,IAAD,OACP,OACE,yBAAKzB,UAAU,OACb,gDAIF,0BAAM6B,OAAO,SAAS7B,UAAU,WAC5B,yBAAKA,UAAU,eACb,8BAAU8B,GAAG,QAAQC,KAAK,QAAQC,KAAK,KAAKC,KAAK,KAAKC,YAAY,uBAAuBC,SAAUC,KAAKjC,aAAcK,MAAO4B,KAAKtB,MAAMR,YACxI,4BAAQ+B,QAASD,KAAK3B,aAAtB,sBAIJ,wBAAIT,UAAU,WAGZoC,KAAKtB,MAAMO,SAASiB,KAAI,SAACC,GACvB,OACE,wBAAIZ,IAAKY,EAAQZ,KACf,2BAAIY,EAAQX,cAEZ,4BAAQS,QAAU,kBAAM,EAAKtB,aAAcwB,EAAQZ,OAAnD,eAUR,kBAAC,EAAD,W,GA/GU1B,aCOEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.1e0620af.chunk.js","sourcesContent":["import firebase from 'firebase/app';  \nimport 'firebase/database'; \n\nconst config = {\n    apiKey: \"AIzaSyBrKuDBFAcon5GaFLkuOjEVkuKEDskVZ90\",\n    authDomain: \"personal-journal-c0bd8.firebaseapp.com\",\n    databaseURL: \"https://personal-journal-c0bd8.firebaseio.com\",\n    projectId: \"personal-journal-c0bd8\",\n    storageBucket: \"personal-journal-c0bd8.appspot.com\",\n    messagingSenderId: \"299999700647\",\n    appId: \"1:299999700647:web:d1e2e927ef461924025d82\"\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;","//footer.js\nimport React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return(\n            <footer>\n                <p className=\"footerParagraph\">Created by Anthony Galea at Juno College</p>\n            </footer>\n        )\n    }\n\n}\n\n\nexport default Footer;","import React, {Component} from 'react';\nimport firebase from './firebase';\nimport './App.css';\nimport Footer from './Footer.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      journals: [],\n      userInput: '',\n    }\n  }\n\n  //connect to Firebase and read info stored in realtime database\n  componentDidMount() {\n    // create a Firebase reference and store it in dbRef variable\n    const dbRef =  firebase.database().ref(); \n\n    //listen to the value change and use `response` as the db value\n    dbRef.on('value',(response) => {\n      console.log(response.val());\n\n      const freshState = [];\n      const data = response.val();\n\n\n      for(const key in data) {\n        console.log(key, data[key]); //journal property(journal1), data.journal1 journal value (journal entry)\n        //push journal entry inside of a temporary array\n\n        //push data as an object with key property\n        freshState.push({\n          key: key,\n          journalEntry: data[key]\n        });\n      }\n\n      //update our React state for journals\n      this.setState({\n        journals: freshState\n      });\n    });\n  }\n\n  //get user input and update the userInput state\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n\n\n  // step 1: prevent webpage from refreshing\n  // step 2: receive input from user and store it in Firebase\n  // step 3: reset input area\n  handleClick = (event) => {\n    event.preventDefault(); //step 1\n\n    //access to Firebase\n    const dbRef = firebase.database().ref(); \n\n    //add new journal to Firebase\n    dbRef.push(this.state.userInput)//step 2\n\n    //reset input area\n    this.setState({     //step 3\n      userInput: ''\n    });\n  }\n\n  // get the specific journal key to remove \n  // delete a specific journal entry from Firebase\n  handleRemove = (journalKey) => {\n    console.log(journalKey);\n\n    // open portal to Firebase\n    const dbRef = firebase.database().ref();\n\n    //delete the journal based on journalKey\n    dbRef.child(journalKey).remove();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Personal Journal</h1>\n\n\n      {/*form for users to write a journal and store the input in Firebase realtime database */}\n      <form action=\"submit\" className=\"wrapper\">\n          <div className=\"journalArea\">\n            <textarea id=\"write\" name=\"write\" rows=\"20\" cols=\"50\" placeholder=\"What's on your mind?\" onChange={this.handleChange} value={this.state.userInput}></textarea>\n            <button onClick={this.handleClick}>Log your journal</button>\n          </div>\n        </form>\n\n        <ul className=\"wrapper\">\n        {\n          //display journals here\n          this.state.journals.map((journal) => {\n            return (\n              <li key={journal.key}>\n                <p>{journal.journalEntry}</p>\n                {/* button to delete journal */}\n                <button onClick={ () => this.handleRemove (journal.key)}>Delete</button>\n              </li>\n            )\n          })\n        }\n        </ul>\n\n        {/* <footer>\n          <p className=\"footerParagraph\">Created by Anthony Galea at Juno College</p>\n        </footer> */}\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}